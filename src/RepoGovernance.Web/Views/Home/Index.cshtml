@using RepoAutomation.Core.Models
@using RepoGovernance.Core.Models
@model List<SummaryItem>
@{
    ViewData["Title"] = "Home Page";

    TimeSpan ts = new();
    string lastUpdated = "[unknown]";
    string user = "[unknown]";
    if (Model.Count > 0)
    {
        DateTime minDate = DateTime.Now;
        DateTime maxDate = DateTime.Now;
        @foreach (SummaryItem item in Model)
        {
            if (minDate > item.LastUpdated)
            {
                minDate = item.LastUpdated;
            }
            if (maxDate < item.LastUpdated)
            {
                maxDate = item.LastUpdated;
            }
        }
        ts = maxDate - minDate;
        lastUpdated = maxDate.ToString("dd-MMM-yyyy h:mm:sstt");
        user = Model[0].User;
    }
}

<style>
    .rowStyle {
        border-width: 1px;
        border-color: #d0d7de;
        border-style: solid;
        padding: 20px;
    }

    .row + .row {
        border-top: 0;
    }

    .projectHeader {
        font-family: sans-serif;
        font-size: 20px;
        font-weight: 600;
    }

    .publicPrivateLabel {
        border-width: 1px;
        border-color: #d0d7de;
        border-radius: 2em;
        border-style: solid;
        font-size: 12px;
        font-weight: 500;
        color: #57606A;
    }

    .descriptionText {
        font-size: 14px;
        color: #57606A;
    }

    .lastUpdatedText {
        font-size: 12px;
        color: #57606A;
    }

    .lastUpdatedRedText {
        font-size: 12px;
        color: red;
    }
</style>

<div>
    <h4>For user <code>@user</code>@* (last updated at @lastUpdated)*@</h4>
    <b>Legend</b>: <i class="bi bi-heart-fill greenHeart" data-toggle="tooltip" data-placement="bottom" title="No recommendations"></i>=Repo is OK, no recommendations
    <i class="bi bi-heart-pulse redHeart" data-toggle="tooltip" data-placement="bottom" title="Recommendations for improvement"></i>=Recommendations for improvement
    <br /><br />
    <div>
        @foreach (SummaryItem item in Model)
        {
            string visibility = item.RepoSettings.visibility switch
            {
                null => throw new ArgumentNullException(nameof(item.RepoSettings.visibility)),
                "" => throw new ArgumentException($"{nameof(item.RepoSettings.visibility)} cannot be empty", nameof(item.RepoSettings.visibility)),
                _ => string.Concat(item.RepoSettings.visibility[0].ToString().ToUpper(), item.RepoSettings.visibility.AsSpan(1))
            };
            <div class="row rowStyle">
                <div class="col-md-8">
                    <div>
                        <a href="https://github.com/samsmithnz/@item.Repo" target="_blank" class="projectHeader">@item.Repo</a> <span class="publicPrivateLabel">&nbsp;&nbsp;@visibility&nbsp;&nbsp;</span><br>
                        <span class="descriptionText">@item.RepoSettings.description</span><br>
                    </div>
                    <div>
                        @if (item.TotalRecommendationCount >= 0)
                        {
                            @if (item.RepoSettingsRecommendations.Count == 0 &&
                           item.BranchPolicies != null && item.BranchPoliciesRecommendations.Count == 0 &&
                           item.Actions.Count > 0 && item.ActionRecommendations.Count == 0 &&
                           item.Dependabot.Count > 0 && item.DependabotRecommendations.Count == 0 &&
                           item.GitVersion.Count > 0 && item.GitVersionRecommendations.Count == 0)
                            {
                                <i class="bi bi-heart-fill greenHeart" data-toggle="tooltip" data-placement="bottom" title="OK"></i> <span>0</span>
                            }
                            else
                            {
                                string recommendation = "Incomplete" + Environment.NewLine + Environment.NewLine;
                                foreach (string itemRec in item.RepoSettingsRecommendations)
                                {
                                    recommendation += " - " + itemRec + Environment.NewLine + Environment.NewLine;
                                }
                                foreach (string itemRec in item.BranchPoliciesRecommendations)
                                {
                                    recommendation += " - " + itemRec + Environment.NewLine + Environment.NewLine;
                                }
                                foreach (string itemRec in item.ActionRecommendations)
                                {
                                    recommendation += " - " + itemRec + Environment.NewLine + Environment.NewLine;
                                }
                                foreach (string itemRec in item.DependabotRecommendations)
                                {
                                    recommendation += " - " + itemRec + Environment.NewLine + Environment.NewLine;
                                }
                                foreach (string itemRec in item.GitVersionRecommendations)
                                {
                                    recommendation += " - " + itemRec + Environment.NewLine + Environment.NewLine;
                                }
                                <i class="bi bi-heart-pulse redHeart" data-toggle="tooltip" data-placement="bottom" title="@recommendation"></i> <span style="font-size: 14px;">@item.TotalRecommendationCount</span>
                            }
                        }
                        &nbsp;&nbsp;
                        <span class="iconify" data-icon="octicon:git-pull-request-16"></span> <a href="https://github.com/@item.Owner/@item.Repo/pulls" target="_blank" title="View all PRs" style="font-size: 14px;">@item.PullRequests.Count</a>

                        @if (item.Release != null || item.CoverallsCodeCoverage != null)
                        {
                            <br />
                            @if (item.Release != null)
                            {
                                <a href="@item.Release.html_url" target="_blank"><img src="https://img.shields.io/static/v1?label=Latest%20release&logo=github&message=@item.Release.name%20@(item.Release.ToTimingString())&color=blue"></a>
                            }
                            @if (item.CoverallsCodeCoverage != null)
                            {
                                string codeCoverageColor = "yellow";
                                if (item.CoverallsCodeCoverage.covered_percent < 50)
                                {
                                    codeCoverageColor = "red";
                                }
                                else if (item.CoverallsCodeCoverage.covered_percent >= 80)
                                {
                                    codeCoverageColor = "brightgreen";
                                }
                                <a href="https://coveralls.io/github/@(item.OwnerRepo)/@(item.Repo)" target="_blank"><img src="https://img.shields.io/static/v1?label=Code%20coverage&logo=coveralls&message=@item.CoverallsCodeCoverage.covered_percent.ToString("0")%&color=@codeCoverageColor"></a>
                            }
                            @if (item.SonarCloud != null)
                            {
                                if (item.SonarCloud.CodeSmellsBadgeImage != null)
                                {
                                    <a href="@item.SonarCloud.CodeSmellsLink" target="_blank">
                                        @Html.Raw(item.SonarCloud.CodeSmellsBadgeImage)
                                    </a>
                                }
                            }
                        }
                        <br>
                        @if (@item.LastUpdated > DateTime.Now.AddDays(-1))
                        {
                            <span class="lastUpdatedText">Last updated: @item.LastUpdated.ToString("dd-MMM-yyyy HH:mmtt")</span>
                        }
                        else
                        {
                            <span class="lastUpdatedText">Last updated: </span>

                            <span class="lastUpdatedRedText">@item.LastUpdated.ToString("dd-MMM-yyyy HH:mmtt")</span>
                        }
                        <a href="@Url.Action("UpdateRow", "Home", new { user = item.User, owner = item.Owner, repo = item.Repo })" class="lastUpdatedText">Update metrics</a>
                    </div>
                </div>
                <div class="col-md-2">
                    @if (item.DotNetFrameworks.Count == 0)
                    {
                        <span class="badge bg-secondary">None found</span>
                    }
                    else
                    {
                        foreach (Framework framework in item.DotNetFrameworks)
                        {
                            <span class="badge @framework.Color">@framework.Name</span>
                            <br />
                        }
                    }
                </div>
                <div class="col-md-2">
                    @if (item.DORASummary != null)
                    {
                        <img src="@item.DORASummary.DeploymentFrequencyBadgeWithMetricURL" />
                        <br />
                        <img src="@item.DORASummary.LeadTimeForChangesBadgeWithMetricURL" />
                        <br />
                        <img src="@item.DORASummary.MeanTimeToRestoreBadgeWithMetricURL" />
                        <br />
                        <img src="@item.DORASummary.ChangeFailureRateBadgeWithMetricURL" />
                    }
                </div>
            </div>
        }
    </div>
    <div>
        <a href="@Url.Action("UpdateAll", "Home")" class="lastUpdatedText">Update all. Warning, takes ~a minute</a>
    </div>
</div>
