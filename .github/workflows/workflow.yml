name: CI/CD
on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: windows-latest
    outputs:
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.15
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: .NET publish
      run: dotnet publish src/RepoGovernance.Core/RepoGovernance.Core.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}'
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: drop
        path: src/RepoGovernance.Core/bin/Release
    - name: .NET publish service
      run: dotnet publish src/RepoGovernance.Web/RepoGovernance.Web.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}' --output ${{ github.workspace }}/web
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: web
        path: ${{ github.workspace }}/web

    - name: .NET publish website
      run: dotnet publish src/RepoGovernance.Service/RepoGovernance.Service.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}' --output ${{ github.workspace }}/service
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: service
        path: ${{ github.workspace }}/service

    - name: .NET publish function
      run: dotnet publish src/RepoGovernance.Function/RepoGovernance.Function.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}' --output ${{ github.workspace }}/function
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: function
        path: ${{ github.workspace }}/function
  
  test:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Variable Substitution appsettings file for tests
      uses: microsoft/variable-substitution@v1
      with:
        files: 'src/RepoGovernance.Tests/appsettings.json'
      env:
        AppSettings.GitHubClientId: "${{ secrets.GitHubClientId }}"
        AppSettings.GitHubClientSecret: "${{ secrets.GitHubClientSecret }}" 
        AppSettings.StorageConnectionString: "${{ secrets.StorageConnectionString }}" 
    - name: .NET test
      run: dotnet test src/RepoGovernance.Tests/RepoGovernance.Tests.csproj -c Release -l:"trx;LogFileName=${{ github.workspace }}/TestOutput.xml"
    - name: Show test results
      uses: samsmithnz/DotNetTestResults@0.1.3
      with:
        fileName: ${{ github.workspace }}/TestOutput.xml
 
  sonarCloud:
    name: Run SonarCloud analysis
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 1.11
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install .NET 7 SDK
        uses: actions/setup-dotnet@v3.0.3
        with:
          dotnet-version: 7.0.x
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"samsmithnz_RepoGovernance" /o:"samsmithnz-github" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          #dotnet build src/RepoGovernance/RepoGovernance.sln
          dotnet build src/RepoGovernance.Tests//RepoGovernance.Tests.csproj
          dotnet build src/RepoGovernance.Service/RepoGovernance.Service.csproj
          dotnet build src/RepoGovernance.Web/RepoGovernance.Web.csproj
          dotnet build src/RepoGovernance.Function/RepoGovernance.Function.csproj
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"        

  deploy:
    runs-on: windows-latest
    needs: 
    - build
    - test
    - sonarCloud
    if: github.ref == 'refs/heads/main'
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: service
          path: service
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: web
          path: web
      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SP }} 
      - name: Set service secrets
        run: az webapp config appsettings set --name "repogovernance-prod-eu-service" --resource-group "RepoGovernance" --settings "AppSettings:GitHubClientId=${{ secrets.GitHubClientId }}" "AppSettings:GitHubClientSecret=${{ secrets.GitHubClientSecret }}" "AppSettings:StorageConnectionString=${{ secrets.StorageConnectionString }}" #--slot staging   
      - name: Deploy to Azure Web App Service
        id: deploy-to-servicesapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: repogovernance-prod-eu-service
          package: service
      - name: Deploy to Azure Web App Website
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: repogovernance-prod-eu-web
          package: web
      - name: Set website configuration
        run: az webapp config appsettings set --name "repogovernance-prod-eu-web" --resource-group "RepoGovernance" --settings "WEBSITE_TIME_ZONE=Eastern Standard Time"

  deployFunction:
    runs-on: windows-latest
    needs:  
    - build
    - test
    - sonarCloud
    if: github.ref == 'refs/heads/main'
    environment:
      name: 'production'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: function
          path: function
      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SP }} 
      - name: Set function secrets
        run: az functionapp config appsettings set --name "repogovernance-prod-eu-schedulefunction" --resource-group "RepoGovernance" --settings "GitHubClientId=${{ secrets.GitHubClientId }}" "GitHubClientSecret=${{ secrets.GitHubClientSecret }}" "StorageConnectionString=${{ secrets.StorageConnectionString }}" "SummaryQueueConnection=${{ secrets.SummaryQueueConnection }}" "DevOpsServiceURL=https://devops-prod-eu-service.azurewebsites.net"
      - name: Deploy Azure Function
        uses: Azure/functions-action@v1
        with:
          app-name: repogovernance-prod-eu-schedulefunction
          package: function        

  release:
    runs-on: ubuntu-latest
    needs: 
    - deploy
    - deployFunction
    if: github.ref == 'refs/heads/main'
    environment:
      name: 'production'
    steps:
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ needs.build.outputs.Version }}" 
        echo "CommitsSinceVersionSource: ${{ needs.build.outputs.CommitsSinceVersionSource }}" 
    - name: Create Release
      uses: ncipollo/release-action@v1
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit/version change
      with:
        tag: ${{ needs.build.outputs.Version }}
        name: Release ${{ needs.build.outputs.Version }}
        token: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
