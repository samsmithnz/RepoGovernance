name: CI/CD
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
jobs:
  build:
    name: Build job
    runs-on: windows-latest
    outputs:
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.11
      with:
        versionSpec: 5.x
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.11
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Variable Substitution appsettings file for tests
      uses: microsoft/variable-substitution@v1
      with:
        files: 'src/RepoGovernance.Tests/appsettings.json'
      env:
        AppSettings.GitHubClientId: "${{ secrets.GitHubClientId }}"
        AppSettings.GitHubClientSecret: "${{ secrets.GitHubClientSecret }}" 
        AppSettings.StorageConnectionString: "${{ secrets.StorageConnectionString }}" 
    - name: .NET test
      run: dotnet test src/RepoGovernance.Tests/RepoGovernance.Tests.csproj -c Release
    - name: .NET publish
      run: dotnet publish src/RepoGovernance.Core/RepoGovernance.Core.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}'
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: drop
        path: src/RepoGovernance.Core/bin/Release
    - name: .NET publish service
      run: dotnet publish src/RepoGovernance.Web/RepoGovernance.Web.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}' --output ${{ github.workspace }}/web
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: web
        path: ${{ github.workspace }}/web

    - name: .NET publish website
      run: dotnet publish src/RepoGovernance.Service/RepoGovernance.Service.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}' --output ${{ github.workspace }}/service
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: service
        path: ${{ github.workspace }}/service

    - name: .NET publish function
      run: dotnet publish src/RepoGovernance.ScheduleFunction/RepoGovernance.ScheduleFunction.csproj -c Release -p:Version='${{ steps.gitversion.outputs.SemVer }}' --output ${{ github.workspace }}/function
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: function
        path: ${{ github.workspace }}/function

  deploy:
    runs-on: windows-latest
    needs: build
    #if: github.ref == 'refs/heads/main'
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-servicesapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: service
          path: service
      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SP }} 
      - name: Set service secrets
        run: az webapp config appsettings set --name "repogovernance-prod-eu-service" --resource-group "RepoGovernance" --settings "AppSettings:GitHubClientId=${{ secrets.GitHubClientId }}" "AppSettings:GitHubClientSecret=${{ secrets.GitHubClientSecret }}" "AppSettings:StorageConnectionString=${{ secrets.StorageConnectionString }}" #--slot staging   
      - name: Deploy to Azure Web App
        id: deploy-to-servicesapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: repogovernance-prod-eu-service
          package: service


  deployFunction:
    runs-on: windows-latest
    needs: build
    if: 1==1
    #if: github.ref == 'refs/heads/main'
    environment:
      name: 'production'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: function
          path: function
      - name: Log into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SP }} 
      - name: Set service secrets
        run: az function config appsettings set --name "repogovernance-prod-eu-schedulefunction" --resource-group "RepoGovernance" --settings "AppSettings:GitHubClientId=${{ secrets.GitHubClientId }}" "AppSettings:GitHubClientSecret=${{ secrets.GitHubClientSecret }}" "AppSettings:StorageConnectionString=${{ secrets.StorageConnectionString }}" #--slot staging   
      #- name: Deploy to Azure Web App
      #  uses: azure/webapps-deploy@v2
      #  with:
      #    app-name: repogovernance-prod-eu-schedulefunction
      #    package: function
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        with:
          app-name: repogovernance-prod-eu-schedulefunction
          package: function        